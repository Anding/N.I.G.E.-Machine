Mount a volume

Perform disk initialize SD level function

	read sector 0 and check that this is a FAT32 formatted disk
		confirm the sector signature 0x55AA at offset 510-511
		confirm the FAT32 signature 0x4641 at offset 82-83
		
	quantify the disk
		read key metrics 
			BPB_BytsPerSec, 11-12, bytes per sector (usually 512)
			BPB_SecPerClus, 13, sectors per cluster
			BPB_RsvdSecCnt, 14-15, number of reserved sectors
			BPB_NumFATs, 16, count of FAT data structures	
			BPB_TotSec32, 32-35, total number of sectors	
			BPB_FATSz32, 36-39, sectors per FAT
			BPB_RootClus, 44-49, first sector of root director
			
		calculate further paramaters
			RootDirSectors = 0 on FAT32;  count of sectors in the root directory
			FirstDataSector = BPB_ResvdSecCnt + (BPB_NumFATs * FATS32z);
			DataSec = BPB_TotSec32 – (BPB_ResvdSecCnt + (BPB_NumFATs * FATS32z));  count of sectors in the data region
			CountofClusters = DataSec / BPB_SecPerClus;  if CountofClusters >= 65525 then the disk has FAT32 capacity
			
			(unsigned long)fat_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors;
			(unsigned long)cluster_begin_lba = Partition_LBA_Begin + Number_of_Reserved_Sectors + (Number_of_FATs * Sectors_Per_FAT);
			(unsigned char)sectors_per_cluster = BPB_SecPerClus;
			(unsigned long)root_dir_first_cluster = BPB_RootClus;

			
			Given any valid cluster number N, where in the FAT(s) is the entry for that cluster number? 
			N = cluster number (the first cluster is N=2)
			FATOffset = N * 4;
			ThisFATSecNum = BPB_ResvdSecCnt + (FATOffset / BPB_BytsPerSec);
			ThisFATEntOffset = REM(FATOffset / BPB_BytsPerSec);
	
	read sector 1 for further file system data
		FSI_StrucSig, 484-487, value 72724161
		FSI_Free_Count, 488-491, Contains the last known free cluster count on the volume. If the value is 0xFFFFFFFF, then the free count is unknown and must be computed
		FSI_Nxt_Free, 492-5, This is a hint for the FAT driver. It indicates the cluster number at which the driver should start looking for free clusters.
		
	working models
			
		working model for FAT usage			
			Obtaining the cluster entry value from the FAT table
			FAT32ClusEntryVal = (*((DWORD *) &SecBuff[ThisFATEntOffset])) & 0x0FFFFFFF;  SecBuff contains the contents of the sector number ThisFATSecNum
			
			Checking if this is the last cluster in a file
			If(FATContent >= 0x0FFFFFF8) IsEOF = TRUE;
			If(FATContent = 0x0FFFFFF7) IsBAD = TRUE;
			
			Writing to the FAT table in respect of a cluster
			FAT32ClusEntryVal = FAT32ClusEntryVal & 0x0FFFFFFF;
						*((DWORD *) &SecBuff[ThisFATEntOffset]) =
						(*((DWORD *) &SecBuff[ThisFATEntOffset])) & 0xF0000000;
						*((DWORD *) &SecBuff[ThisFATEntOffset]) =
						(*((DWORD *) &SecBuff[ThisFATEntOffset])) | FAT32ClusEntryVal;
			note entries are 28 bit and the top 4 bits should be left unchanged
			
		working model for cluster access
			Given any valid data cluster number N, what is the sector number of the first sector of that cluster?
			FirstSectorofCluster = ((N – 2) * BPB_SecPerClus) + FirstDataSector;

		working model for directory read access
			Find the first cluster of the root directory at BPB_RootClus
			Access the directory entry by entry (32 bytes each)
				First access byte 11 and check that it is a short directory entry by x AND 31 = 0
				Read the name field 0-11 and convert to 8+1 format (or vice versa)
				Read DIR_FileSize at field 28-31
				Read DIR_FstClusHI at field 20-21
				Read DIR_FstClusLO at field 26-27
				Calculate the first cluster of the file
				
					